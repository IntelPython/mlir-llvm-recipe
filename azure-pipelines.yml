trigger:
  - master

jobs:
# - job: Windows
#   timeoutInMinutes: 0

#   pool:
#     vmImage: vs2017-win2016

#   steps:
#   - script: |
#       call cmake --version
#       set /p SHA=<llvm-sha.txt
#       echo ##vso[task.setvariable variable=LLVMSHA;]%SHA%
#       call pip install ninja
#       git clone https://github.com/llvm/llvm-project.git
#       cd llvm-project
#       git checkout %SHA%
#       call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
#       cmake ..\llvm-project\llvm -G "Ninja" -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_BUILD_EXAMPLES=ON -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_INSTALL_PREFIX=..\mlir-llvm
#       ninja install
#     displayName: 'Build'

#   - publish: $(System.DefaultWorkingDirectory)/mlir-llvm
#     artifact: 'mlir-llvm_$(LLVMSHA)_$(Agent.OS)'
#     displayName: 'Publish sha artifact'

#   - publish: $(System.DefaultWorkingDirectory)/mlir-llvm
#     artifact: 'mlir-llvm_latest_$(Agent.OS)'
#     displayName: 'Publish latest artifact'

- job: Windows_windows_2019
  timeoutInMinutes: 0

  pool:
    vmImage: windows-2019

  steps:
  - script: |
      call cmake --version
      set /p SHA=<llvm-sha.txt
      echo ##vso[task.setvariable variable=LLVMSHA;]%SHA%
      call pip install ninja
      git clone https://github.com/llvm/llvm-project.git
      cd llvm-project
      git checkout %SHA%
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      cmake ..\llvm-project\llvm -G "Ninja" -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_BUILD_EXAMPLES=ON -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_INSTALL_PREFIX=..\mlir-llvm
      ninja install
    displayName: 'Build'

  - publish: $(System.DefaultWorkingDirectory)/mlir-llvm
    artifact: 'mlir-llvm_$(LLVMSHA)_$(Agent.OS)'
    displayName: 'Publish sha artifact'

  - publish: $(System.DefaultWorkingDirectory)/mlir-llvm
    artifact: 'mlir-llvm_latest_$(Agent.OS)'
    displayName: 'Publish latest artifact'

- job: Linux
  timeoutInMinutes: 0

  pool:
    vmImage: ubuntu-20.04

  steps:
  - script: |
      cmake --version
      read SHA < llvm-sha.txt
      echo "##vso[task.setvariable variable=LLVMSHA;]$SHA"
      git clone https://github.com/llvm/llvm-project.git
      cd llvm-project
      git checkout $SHA
      cmake ../llvm-project/llvm -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_BUILD_EXAMPLES=ON -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=../mlir-llvm
      make -j$(nproc --all) all
      cmake --install .
    displayName: 'Build'

  - publish: $(System.DefaultWorkingDirectory)/mlir-llvm
    artifact: 'mlir-llvm_$(LLVMSHA)_$(Agent.OS)'
    displayName: 'Publish sha artifact'

  - publish: $(System.DefaultWorkingDirectory)/mlir-llvm
    artifact: 'mlir-llvm_latest_$(Agent.OS)'
    displayName: 'Publish latest artifact'

- job: MacOS
  timeoutInMinutes: 0

  pool:
    vmImage: macOS-10.15

  steps:
  - script: |
      cmake --version
      read SHA < llvm-sha.txt
      echo "##vso[task.setvariable variable=LLVMSHA;]$SHA"
      git clone https://github.com/llvm/llvm-project.git
      cd llvm-project
      git checkout $SHA
      cmake ../llvm-project/llvm -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_BUILD_EXAMPLES=ON -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=../mlir-llvm
      make -j$(sysctl -n hw.ncpu) all
      cmake --install .
    displayName: 'Build'

  - publish: $(System.DefaultWorkingDirectory)/mlir-llvm
    artifact: 'mlir-llvm_$(LLVMSHA)_$(Agent.OS)'
    displayName: 'Publish sha artifact'

  - publish: $(System.DefaultWorkingDirectory)/mlir-llvm
    artifact: 'mlir-llvm_latest_$(Agent.OS)'
    displayName: 'Publish latest artifact'
